{
  "articles": [
    {
      "path": "index.html",
      "title": "PSYC 573 Multilevel Modeling (2022 Spring)",
      "description": "Welcome to the website. I hope you enjoy it!\n",
      "author": [],
      "contents": "\n\n\n\n",
      "last_modified": "2022-01-05T21:14:17-08:00"
    },
    {
      "path": "r_basics.html",
      "title": "R Basics",
      "description": "Review of basic syntax in R",
      "author": [],
      "date": "December 18, 2021",
      "contents": "\n\nContents\nLoad Packages\nCreate an Object and Get Object Information\nPiping\nVector, Matrix, Array, List, and Data Frames\nPlotting\nScatter plot\nChanging labels\nDifferent geom\nFacet\n\nfor Loop\nCustom Function\nExample 1: \\(a^2 + b\\)\nWhen to use a function?\n\nLast updated\n\nLoad Packages\n\n\nlibrary(tidyverse)\ntheme_set(theme_classic() +\n    theme(panel.grid.major.y = element_line(color = \"grey92\")))\n\n\n\nCreate an Object and Get Object Information\n\n\n# Create an object named `x`, using the assignment operator `<-`\nx <- c(1, 2)\n# Generally, nothing returns after an assignment. Type `x` to print the object\nx\n\n\n#> [1] 1 2\n\n# Check the type\ntypeof(x)\n\n\n#> [1] \"double\"\n\n# Check the length\nlength(x)\n\n\n#> [1] 2\n\n# A quick look of the structure of an object\nstr(x)\n\n\n#>  num [1:2] 1 2\n\nAnother example\n\n\ny <- as.character(c(seq(1, to = 10, by = 0.5), 99, 99))\ntypeof(y)\n\n\n#> [1] \"character\"\n\nstr(y)\n\n\n#>  chr [1:21] \"1\" \"1.5\" \"2\" \"2.5\" \"3\" \"3.5\" \"4\" \"4.5\" \"5\" \"5.5\" \"6\" ...\n\nTo find out what the seq() function does, use\n\n\n?seq\n\n\n\nPiping\nA pipe operator is an alternative way to do multiple operations on an object. For example, the following code (a) transform y to numbers, (b) recode the value 99 to missing, and (c) obtain the mean. The traditional way to do it in R is through nested parentheses:\n\n\n# 3. Get the mean\nmean(\n    # 2. Recode 99 to missing\n    na_if(\n        # 1. transform to numbers\n        as.numeric(y), 99\n    ),\n    na.rm = TRUE\n)\n\n\n#> [1] 5.5\n\nWhat’s inconvenient is that the last operation needs to be put first. Also, it’s hard to keep track of the parentheses. Some users, including myself, prefer the alternative way of doing the same as the above code:\n\n\ny %>%\n    # 1. transform to numbers\n    as.numeric() %>%\n    # 2. Recode 99 to missing\n    na_if(99) %>%\n    # 3. Get the mean\n    mean(na.rm = TRUE)\n\n\n#> [1] 5.5\n\nThe pipe operator works by taking the object before %>% as the first argument for the function after %>%. So y %>% as.numeric() is the same as as.numeric(y), and y2 %>% na_if(99) is the same as na_if(y2, 99).\n\nNote: The %>% operator requires loading the tidyverse package (specifically magrittr package). Since R 4.1.0, one can use |> for piping without loading any packages. While in the future |> is probably the preferred way, for now we’ll stick to %>% to make things compatible for older versions of R.\nVector, Matrix, Array, List, and Data Frames\n\n\n# Vector\n(vector_a <- 1:10)\n\n\n#>  [1]  1  2  3  4  5  6  7  8  9 10\n\ntypeof(vector_a)\n\n\n#> [1] \"integer\"\n\nis.vector(vector_a)  # check whether it is a vector\n\n\n#> [1] TRUE\n\nvector_a[2:3]  # select the second and the third elements\n\n\n#> [1] 2 3\n\n(vector_b <- c(\"classical\", \"frequentisti\", \"Bayesian\"))\n\n\n#> [1] \"classical\"    \"frequentisti\" \"Bayesian\"\n\ntypeof(vector_b)  # character vector\n\n\n#> [1] \"character\"\n\nlogical_b <- vector_b == \"Bayesian\"\ntypeof(logical_b)  # logical vector\n\n\n#> [1] \"logical\"\n\n\n\n# Matrix\nmatrix_c <- matrix(1:10, nrow = 5, ncol = 2)\nrownames(matrix_c) <- paste0(\"row\", 1:5)\ncolnames(matrix_c) <- c(\"var1\", \"var2\")\nmatrix_c\n\n\n#>      var1 var2\n#> row1    1    6\n#> row2    2    7\n#> row3    3    8\n#> row4    4    9\n#> row5    5   10\n\ntypeof(matrix_c)\n\n\n#> [1] \"integer\"\n\nclass(matrix_c)\n\n\n#> [1] \"matrix\" \"array\"\n\nstr(matrix_c)\n\n\n#>  int [1:5, 1:2] 1 2 3 4 5 6 7 8 9 10\n#>  - attr(*, \"dimnames\")=List of 2\n#>   ..$ : chr [1:5] \"row1\" \"row2\" \"row3\" \"row4\" ...\n#>   ..$ : chr [1:2] \"var1\" \"var2\"\n\nis.vector(matrix_c)  # check whether it is a vector\n\n\n#> [1] FALSE\n\nis.matrix(matrix_c)  # check whether it is a matrix\n\n\n#> [1] TRUE\n\nmatrix_c[c(\"row1\", \"row5\"), ]  # select rows 1 and 5\n\n\n#>      var1 var2\n#> row1    1    6\n#> row5    5   10\n\nmatrix_c[, 1]  # select first column (converted to a vector)\n\n\n#> row1 row2 row3 row4 row5 \n#>    1    2    3    4    5\n\n\n\n# Array: An array can have one, two, or more dimensions. \n# A matrix is also an array.\narray_d <- array(rnorm(8), dim = c(2, 2, 2))\narray_d\n\n\n#> , , 1\n#> \n#>              [,1]       [,2]\n#> [1,] -0.127125940 -0.5683933\n#> [2,]  0.003396637 -0.6254829\n#> \n#> , , 2\n#> \n#>           [,1]       [,2]\n#> [1,]  1.649242  0.6741832\n#> [2,] -1.019481 -0.7365945\n\nstr(array_d)\n\n\n#>  num [1:2, 1:2, 1:2] -0.1271 0.0034 -0.5684 -0.6255 1.6492 ...\n\ntypeof(array_d)  # numeric type\n\n\n#> [1] \"double\"\n\nclass(array_d)\n\n\n#> [1] \"array\"\n\nis.matrix(array_d)\n\n\n#> [1] FALSE\n\nis.array(array_d)\n\n\n#> [1] TRUE\n\narray_d[1, 1,]  # use 3 indices for a 3-D array\n\n\n#> [1] -0.1271259  1.6492415\n\n\n\n# List\n# An array is a vector where each component can have a different type\nlist_e <- list(\"abc\", 5, 2.57, TRUE)\ntypeof(list_e)\n\n\n#> [1] \"list\"\n\nclass(list_e)  # `list` for both type of class\n\n\n#> [1] \"list\"\n\nstr(list_e)\n\n\n#> List of 4\n#>  $ : chr \"abc\"\n#>  $ : num 5\n#>  $ : num 2.57\n#>  $ : logi TRUE\n\nlist_e[1]  # extract first element, and put it in a list\n\n\n#> [[1]]\n#> [1] \"abc\"\n\nlist_e[[1]]  # extract first element\n\n\n#> [1] \"abc\"\n\nlist_f <- list(name = \"abc\", age = 5)  # named list\n# Can also extract element by name (as opposed to by position)\nlist_f$name\n\n\n#> [1] \"abc\"\n\nis.vector(list_f)  # a one-dimension list is a special type of vector\n\n\n#> [1] TRUE\n\n\n\n# Data Frame\n# A data frame is a special type of list with two dimensions.\n# It is a list of multiple column vectors\n(dataframe_c <- as.data.frame(matrix_c))\n\n\n#>      var1 var2\n#> row1    1    6\n#> row2    2    7\n#> row3    3    8\n#> row4    4    9\n#> row5    5   10\n\ntypeof(dataframe_c)  # type is list\n\n\n#> [1] \"list\"\n\nclass(dataframe_c)  # data.frame\n\n\n#> [1] \"data.frame\"\n\ndataframe_c[c(1, 2),]  # subset using matrix method\n\n\n#>      var1 var2\n#> row1    1    6\n#> row2    2    7\n\ndataframe_c$var1  # extract columns using list method\n\n\n#> [1] 1 2 3 4 5\n\ndataframe_c[[1]]  # same as above\n\n\n#> [1] 1 2 3 4 5\n\n# select first column, and put it as a data.frame(list)\ndataframe_c[1]\n\n\n#>      var1\n#> row1    1\n#> row2    2\n#> row3    3\n#> row4    4\n#> row5    5\n\nPlotting\nThe popular ggplot2 package uses the “grammar of graphics” approach to plotting. It is an elegant and comprehensive system for graphics, but requires mastering some vocabularies. As a quick start, each plot requires specifying\nSome layer(s) of geometric elements (e.g., points, lines, boxplots, etc)\nMapping of some data/variables to some aesthetic attributes (e.g., axis, color, point shape)\nTo learn more, please take a look on the cheatsheet: https://www.rstudio.com/resources/cheatsheets/\nFor example, consider the airquality data set:\n\n\nhead(airquality)\n\n\n#>   Ozone Solar.R Wind Temp Month Day\n#> 1    41     190  7.4   67     5   1\n#> 2    36     118  8.0   72     5   2\n#> 3    12     149 12.6   74     5   3\n#> 4    18     313 11.5   62     5   4\n#> 5    NA      NA 14.3   56     5   5\n#> 6    28      NA 14.9   66     5   6\n\nOne can show the distribution of Ozone. On a 2-D Cartesian coordinate system, if we want to show the data in points, each point needs the x- and the y-coordinates. Therefore, the following gives an error as it only maps Ozone to the x-axis:\n\n\nggplot(data = airquality) +\n    # Add a layer of points\n    geom_point(aes(x = Ozone))\n\n\n#> Error: geom_point requires the following missing aesthetics: y\n\n\nWhile not very interesting, we can instead specify every point to have a y-coordinate of 0:\n\n\nggplot(data = airquality) +\n    # Add a layer of points\n    geom_point(aes(x = Ozone, y = 0))\n\n\n\n\nSome geometric objects (geom) assign the y-coordinate automatically. For example, geom_histogram uses bars, with the x-coordinate based on the variable, and the y-coordinate based on the counts of each bin\n\n\nggplot(data = airquality) +\n    # Add a layer of a histogram (a set of bars)\n    geom_histogram(aes(x = Ozone))\n\n\n\n\nScatter plot\nA scatter plot maps the x- and the y-axes to two variables\n\n\nggplot(data = airquality) +\n    # Add a layer of a points\n    geom_point(aes(x = Wind, y = Ozone),\n               # alpha = 0.3 makes points transparent\n               alpha = 0.5)\n\n\n\n\nThe x- and y-coordinates are not the only attributes for the points geometric object. For example, we can map the sizes of the points to another variable:\n\n\nggplot(data = airquality) +\n    # Add a layer of a points\n    geom_point(aes(x = Wind, y = Ozone, size = Temp),\n               alpha = 0.3)\n\n\n\n\nChanging labels\nTo change the labels of axis and legend, use labs:\n\n\nggplot(data = airquality) +\n    # Add a layer of a points\n    geom_point(aes(x = Wind, y = Ozone, size = Temp),\n               alpha = 0.3) +\n    labs(x = \"Wind (mph)\", y = \"Ozone (ppb)\", size = \"Temperature (degree F)\")\n\n\n\n\nDifferent geom\nWe can use other geometric objects. For example, geom_smooth adds a smoothing trend\n\n\n# By putting `aes()` in the first line, all subsequent layers use the same\n# mapping\nggplot(aes(x = Wind, y = Ozone), data = airquality) +\n    # Add a layer of points\n    geom_point() +\n    # Add a layer of lines\n    geom_smooth()\n\n\n\n\nFacet\nIn many situations, we want to split the data into multiple plots through facet.\n\n\nggplot(aes(x = Wind, y = Ozone), data = airquality) +\n    # Add a layer of a points\n    geom_point(alpha = 0.3) +\n    # Split by `Month`\n    facet_wrap(~ Month)\n\n\n\n\nfor Loop\nUsing a loop allows one to perform some actions multiple times. See https://r4ds.had.co.nz/iteration.html#introduction-14\nThe following example shows an example of drawing a random variable from a normal distribution with SD = 1, and with the mean equals to the previously generated number.\n\n\n# Simulate data\nrandom_numbers <- rep(NA, 100)  # initialize an empty vector\nrandom_numbers[1] <- 10  # set the first value to 10\n# i = 2 in the first iteration, then 3, then 4, until i = 100\nfor (i in 2:100) {\n    # `rnorm(1)` simulate one value from a normal distribution;\n    # `mean = random_numbers[i - 1]` says the mean of the distribution is\n    # from the previously simulated value.\n    random_numbers[i] <- rnorm(1, mean = random_numbers[i - 1])\n}\n# Show the simulated values using ggplot\nggplot(\n    tibble(iter = 1:100, random_numbers),\n    aes(x = iter, y = random_numbers)\n) +\n    geom_line() +\n    geom_point()\n\n\n\n\nCustom Function\nA function in R is a named object that takes in some inputs, performs some operations, and gives some outputs.\nExample 1: \\(a^2 + b\\)\nHere is an example of how you can define your own function, from p. 64 of the text\n\n\nasqplusb <- function(a, b = 1) {\n    c <- a ^ 2 + b  # c = a^2 + b\n    c  # the last line is usually the output\n}\n\n\n\nIn the above function asqplusb(), it takes two inputs: a and b. The name of these two are called arguments. So we say a and b are the arguments of asqplusb(). We can invoke the function like\n\n\nasqplusb(2, 3)  # a = 2, b = 3, 2^2 + 3 = 7\n\n\n#> [1] 7\n\n# This is equivalent to\nasqplusb(a = 2, b = 3)\n\n\n#> [1] 7\n\n# But not the same as\nasqplusb(b = 2, a = 3)\n\n\n#> [1] 11\n\nNote that 2 and 3 are the values of the arguments, not the arguments themselves.\nAlso, notice when we define the function, we say the first argument is a, and the second argument is b = 1. This means the default value of b is 1. So when one call the function without specifying b, like\n\n\nasqplusb(4)  # a = 4, b = 1, 4^2 + 1 = 17\n\n\n#> [1] 17\n\nIt is equivalent to\n\n\nasqplusb(4, b = 1)  # a = 4, b = 1, 4^2 + 1 = 17\n\n\n#> [1] 17\n\nWhen to use a function?\nWriting one’s own function is very common in R programming, especially with Bayesian analysis, because a lot of times one needs to perform some procedures more than once, and it is tedious to write similar code every time. A rule of thumb is that if you have a few lines of code that you find yourself typing more than two times, you should write a function for it. As an example, we can wrap the simulation code above into a function that you can try out with different number of iterations:\n\n\nmy_simulate <- function(nsim = 100) {\n    # Simulate data\n    random_numbers <- rep(NA, nsim) # initialize an empty vector\n    random_numbers[1] <- 10 # set the first value to 10\n    # i = 2 in the first iteration, then 3, then 4, until i = 100\n    for (i in 2:nsim) {\n        # `rnorm(1)` simulate one value from a normal distribution;\n        # `mean = random_numbers[i - 1]` says the mean of the distribution is\n        # from the previously simulated value.\n        random_numbers[i] <- rnorm(1, mean = random_numbers[i - 1])\n    }\n    # Show the simulated values using ggplot\n    ggplot(\n        tibble(iter = 1:nsim, random_numbers),\n        aes(x = iter, y = random_numbers)\n    ) +\n        geom_line() +\n        geom_point()\n}\n\n\n\nTry to call the above function.\n\nLast updated\n\n#> [1] \"January 05, 2022\"\n\n\n\n\n\n\n\n\n",
      "last_modified": "2022-01-05T21:14:23-08:00"
    },
    {
      "path": "syllabus.html",
      "title": "PSYC 573 Bayesian Data Analysis",
      "description": "Course syllabus (PSYC 573, 2022 Spring)\n",
      "author": [],
      "contents": "\n\nContents\nCourse Description\nLearning Objectives\nCourse Notes\nCommunication\nTechnological Proficiency and Hardware/Software Required\nUSC technology rental program\nUSC Technology Support Links\n\nRequired Materials\nRecommended Materials\nDescription and Assessment of Assignments\nParticipation\nGrading Breakdown\nGrading Scale\nAssignment Submission\nGrading Timeline\nLate work\nTechnology in the classroom\nPhones\nTablets and Laptops\n\nAttendance\nClassroom Norms\nCOVID-19 Guidance\nCourse Evaluation\n(Tentative) Course Schedule: A Weekly Breakdown\nStatement on Academic Conduct and Support Systems\nAcademic Conduct:\nSupport Systems:\nLast updated\n\n\n @media print { a[href]::after { content: none !important; } } \n\n\nUnits: 4Term–Day–Time: Spring 2022–Tues & Thurs–10:00-11:50 am\nLocation: WPH 205\nInstructor: Hok Chio (Mark) LaiOffice Hours: Tues 12:00–1:00 pm, and by appointment.Contact Info: (Email) hokchiol@usc.edu, (Slack) https://usc.enterprise.slack.com/.\nTimeline for replying to emails: within 48 hours.\nIT Help: ITS, BlackboardContact Info:\nITS (Email, Monday — Friday, 8:00 A.M. — 6:00 P.M.) consult@usc.edu, (Phone, 24/7/365) 213-740-5555, (Online) ServiceNow Portal\nBlackboard (Email, 24/7/365) blackboard@usc.edu, (Online Help) Blackboard Help for Students\nCourse Description\nBayesian statistics is a coherent framework of doing statistics. It has been one of the biggest ongoing revolutions in quantitative research methods and has been recommended as an alternative to the classical approach of hypothesis testing, as well as a computational device for some problems not easily handled in the classical approach. Students will learn about applications of Bayesian statistical methods specifically on behavioral and social science data and develop skills in conducting Bayesian analysis of real-life data.\nThe course begins with a brief discussion on the history of the Bayesian method and the Bayesian view of probability and some comments on the philosophical differences between Bayesian and classical statistical analyses. One-parameter models and group comparisons are then discussed, with an emphasis on how Bayesian analysis incorporates information from data to update researchers’ beliefs about the world. After an introduction on Markov Chain Monte Carlo Estimation—the engine primarily responsible for the resurrection of Bayesian statistics, the course covers applications of Bayesian statistics in commonly used statistical models, including linear and generalized linear models. It also illustrates the components in the Bayesian workflow, such as the selection of priors, model checking and model comparisons, and missing data handling.\nLearning Objectives\nAfter the successful completion of this course, students will be able to\nDescribe the foundations of the Bayesian framework of statistics;\nExplain to fellow researchers the terminologies in Bayesian analysis, such as prior, posterior, credible intervals, MCMC, etc;\nExplain and demonstrate in applications the advantages and disadvantages of the Bayesian approach in comparisons to classical approaches;\nIndependently perform Bayesian analyses covered in this class using statistical software on real data;\nConduct a research project involving Bayesian analysis and effectively communicate their findings/products in an oral presentation and a written report.\nPrerequisite(s): None\nCo-Requisite(s): None\nConcurrent Enrollment: None\nRecommended Preparation: PSYC 501: Classic and Modern Statistical Methods I; Experience with R\nCourse Notes\nStudents are expected to finish the reading assignments before class meetings and actively participate in class discussions and activities. A typical class meeting will include lectures, quizzes, software demonstrations, and small-group discussions/activities. Lecture slides/notes will be posted on Blackboard before class meetings, but please note that the lecture slides only serve to guide class discussions and cannot replace the assigned readings. Students are expected to bring laptops to class to follow the software demonstration and work on in-class exercises.\nAs announced in the Provost’s memo (https://we-are.usc.edu/2021/12/24/12-24-spring-semester-update/), the first week of classes in 2022 Spring will be conducted remotely. In-person instruction will resume starting Week 2.\nCommunication\nTo promote independence and critical thinking, students are encouraged to work through the following process for obtaining answers to course-related questions before contacting the instructor:\nconsult the course syllabus;\nconsult a classmate or post your questions on Slack;\nmeet with the instructor during office hours or Q&A sessions on Tuesdays;\nfor personal questions, email the instructor at hokchiol@usc.edu\nTechnological Proficiency and Hardware/Software Required\nR and RStudio are needed to complete the course assignments. It is highly recommended that students update to the latest versions of both software (R 4.1.0, RStudio 2021.09.0, or above). We will briefly discuss how to set up R and RStudio in Week 1.\nThe textbook and most of the supplemental readings can be accessed through the USC Libraries at https://libraries.usc.edu/\nUSC technology rental program\nIf you need resources to successfully participate in your classes, such as a laptop or internet hotspot, you may be eligible for the university’s equipment rental program. To apply, please submit an application.\nUSC Technology Support Links\nZoom information for students Blackboard help for studentsSlack information for studentsSoftware available to USC Campus\nRequired Materials\nKruschke, J. K. (2015). Doing Bayesian data analysis: A tutorial with R, JAGS, and Stan (2nd ed.). Academic Press.\nAvailable from USC library (login required): https://www-sciencedirect-com.libproxy2.usc.edu/book/9780124058880/doing-bayesian-data-analysis\nCorrigenda: https://docs.google.com/spreadsheets/d/1gWjvDKXfSvEhlrdjevSzf6YqnVcFL3QLPGxybAriIng\n\nRecommended Materials\nE-copies of all below are available at USC Libraries.\nMcElreath, R. (2020). Statistical rethinking: A Bayesian course with examples in R and Stan (2nd ed.). CRC Press.\nGelman, A., Hill, J., & Vehtari, A. (2021). Regression and Other Stories. Cambridge University Press. https://doi.org/10.1017/9781139161879 [Very good book on regression]\nGelman, A., Carlin, J. B., Stern, H. S., Dunson, D. B., Vehtari, A., & Rubin, D. B. (2014). Bayesian data analysis (3rd ed.). CRC Press. [For more technical depth]\nMcGrayne, S. B. (2012). The theory that would not die: How Bayes’ rule cracked the Enigma code, hunted down Russian submarines, and emerged triumphant from two centuries of controversy. Yale University Press. [A very nice historical account of the Bayes’ theorem.]\nDescription and Assessment of Assignments\nIn-class exercises (10%). During some of the class sessions, students will participate in quizzes or group exercises. If students miss an exercise for participation credit, they can complete the exercise posted on Blackboard within 24 hours to get credits.\nHomework problems (70%). There will be weekly homework assignments for students to apply the concepts and techniques discussed in class to analytic problems. The assignments typically involve performing data analyses using data sets of your own or provided by the instructor, and interpreting the results with some guided questions. Please submit your work electronically to Blackboard by Monday 11:59 p.m. Pacific Time the week after a homework is assigned. See policy on late work.\nFinal project (20%: 5% prospectus, 15% presentation/final report). You will complete a research project related to Bayesian analysis, typically a report of analyzing real data or a theoretical/methodological analysis about certain aspects of Bayesian data analysis. For empirical analyses, the focuses are (a) formulating and justifying prior distributions from a review of previous literature, (b) obtaining and interpreting posterior distributions, and (c) comprehensive reporting of methods and results. Students can also replicate the analyses of an existing study, as long as the chosen study shared sufficient data and materials and did not use a Bayesian analysis with informative priors. Students interested in project ideas other than an empirical research report (e.g., software package development, systematic review/meta-analysis) are encouraged to discuss their ideas with the instructor. Each student can choose to work on their own or in a group of up to three people.\nThere are two grading components for your final project:\nProspectus (5%)\nA prospectus about your project should be submitted by Monday, March 21. The prospectus should contain a concise description of what you (or your group) plan to do for your project, including a preliminary plan for statistical analysis. The prospectus should be limited to 1 single-spaced page (excluding tables, figures, references, and other supplemental materials).\nFinal Presentation/Report (15%)\nIf you choose to do a presentation, on April 26 and 28, you or your group will give a 15-minute presentation on your project. You will also need to submit your slides to Blackboard for grading on the day of your presentation, which should include a link to the reproducible codes for your analyses. A grading rubric on the final presentation will be posted on Blackboard.\nIf you choose to do a final report, your report will be due Tuesday, May 10, at 1:00 p.m. Pacific Time (the assigned final exam time for the class). There should also be a link to the reproducible codes for your analyses. The final paper should be 6-10 double-spaced pages of text (i.e., excluding title page, references, tables, figures, and appendices).\n\nParticipation\nParticipation accounts for 10% of the course grade. To earn full credit for participation, students should complete and turn in all in-class exercises.\nGrading Breakdown\nAssignment\n% of Grade\nIn-class exercises\n10\nHomework\n70\nProspectus\n5\nFinal Presentation/Paper\n15\nTOTAL\n100\nGrading Scale\nCourse final grades will be determined using the following scale\nA\n93-100\nA-\n89-92\nB+\n85-88\nB\n81-84\nB-\n77-80\nC+\n73-76\nC\n70-72\nC-\nBelow 70 (failing)\nAssignment Submission\nThe assignments should be submitted through Blackboard by Monday at 11:59 p.m. Pacific Time.\nGrading Timeline\nGenerally, all graded work will be returned no later than one week from the submission deadline. However, given the high number of students in the class, the instructor may only grade selected questions in each assignment. Solutions will be posted so that students can check their own work.\nLate work\nLate work will be penalized by a 10% deduction in the assignment grade every 24 hours late unless due to an emergency excused by the instructor. Email the instructor as soon as possible to discuss alternate arrangements due to an emergency.\nTechnology in the classroom\nPhones\nYour phone should be turned off or in silent mode (not on vibrate), and should not be used in the classroom.\nTablets and Laptops\nDuring lecture time in the classroom, students can use tablets and laptops only for purposes of viewing course materials and taking notes. Use of tablets and laptops for note taking is strongly discouraged as it may distract both yourself and your peers (Sana, Weston, & Cepeda, 2013). During the in-class exercises, students should use their laptops to complete the assignments.\nAttendance\nStudents are expected to attend all Thursday class sessions on time. If they miss a session, they should complete the class exercises and turn in their work within the timeframe specified in Description and Assessment of Assignments.\nClassroom Norms\nFrom USC’s FALL 2021 GUIDE: Return To Campus Protocols document,\n\nStudents, faculty and staff need to be aware of COVID-19 symptoms, and are required to complete a daily self-screening via Trojan Check before coming onto campus or leaving their on-campus residence.\n\n\nStudents, faculty, and staff are required to wear masks indoors, including classrooms, and no food or drink is permitted during class\n\nFrom USC’s Updated Masking Guidance for Campus Environments,\n\nIndividuals on USC campus premises in locations where masking is required are now required to wear medical grade masks, which at minimum are surgical masks and may also include higher grade respirator masks (N95, KN95, or KF94).\n\nThe following applies to both in-person and online communications (e.g., Slack discussions and email communications)\nRespect each other’s views.\nIn written communication messages, make sure they are something you could say to someone to their face.\nRecognize and/or remember that we have different backgrounds.\nCriticize ideas, not individuals or groups.\nEither support statements with evidence, or speak from personal experience.\nCOVID-19 Guidance\nStudents should consult the latest COVID-19 testing and health protocol requirements for on-campus courses. Continuously updated requirements can be found on the USC COVID-19 resource center website at https://coronavirus.usc.edu/ and https://we-are.usc.edu/.\nCourse Evaluation\nStudent feedback is essential to the instructor and the Department to keep improving this course. Students are encouraged to share their feedback and suggestions in an early-term feedback survey around week 4 to 5, and respond to the standard USC course evaluation survey at the end of the semester.\n(Tentative) Course Schedule: A Weekly Breakdown\n\n\n\n\nTopics/Daily Activities\nReadings\nAssignment Dates\nWeek 1\nJan 11 & 13 (Remote)\nOverview of Bayesian Statistics\nR programming I\nR Markdown\n\nGigerenzer (2004)\nKruschke ch. 2\nSupplemental: James ch. 1\nMarkdown Quick Reference\n\nExercise: R Markdown\nHW 1\n\nWeek 2\nJan 18 & 20\nProbability\nR programming II\n\nKruschke ch. 4\nWickham & Grolemund ch. 7, 19\n\nExercise: Probability\nHW 2\n\nWeek 3\nJan 25 & 27\nBayes Theorem\n\nKruschke ch. 5\n\nExercise: Screening test example\n\nWeek 4\nFeb 1 & 3\nOne Parameter Models\nPosterior predictive checks\n\nKruschke ch. 6\nGabry et al. (2019)\n\nExercise: Graphical check\nHW 3\n\nWeek 5\nFeb 8 & 10\nMCMC: Metropolis & Gibbs\n\nKruschke ch. 7\n\nExercise: Metropolis\nHW 4\n\nWeek 6\nFeb 15 & 17\nSTAN & HMC\n\nKruschke ch. 14\nMCMC Interactive Gallery\n\nExercise: Divergent transition\nHW 5\n\nWeek 7\nFeb 22 & 24\nHierarchical models\n\nKruschke ch. 9\n\nExercise: Identifying data structure\nHW 6\n\nWeek 8\nMar 1 & 3\nGroup Comparisons\n\nKruschke ch. 12.1, 16\n\nExercise: ROPE\nHW 7\n\nWeek 9\nMar 8 & 10\nGLM–Overview\n\nKruschke ch. 15\n\nExercise: Comparing GLMs\nProject prospectus\n\nWeek 10\nSpring Recess\n\n\n\nWeek 11\nMar 22 & 24\nLinear Regression\n\nKruschke ch. 17, 19\n\nExercise: Dummy coding\nHW 8\n\nWeek 12\nMar 29 & Apr 1\nMultiple Regression\nCausal Inference I\n\nKruschke ch. 18\nMcElreath ch. 6\n\nExercise: Interaction\nHW 9\n\nWeek 13\nApr 5 & 7\nCausal Inference II\nModel Comparisons\n\nMcElreath ch. 7\nReference on Bayes Factor: Kruschke ch. 10\n\nExercise: IC vs. BF\nHW 10\n\nWeek 14\nApr 12 & 14\nMissing Data\n\nMcElreath ch. 15\n\nExercise: Multiple Imputation\nHW 11\n\nWeek 15\nApr 19 & 21\nExtension of linear model\nReporting\n\nKruschke ch. 21–24 (pick topic of interest)\nKruschke ch. 25\n\nHW 12\nProject update\n\nWeek 16\nApr 26 & 28\nPresentation\n\n\n\nFINAL\nFinal report\n\nMay 10 1:00 pm PDT\nStatement on Academic Conduct and Support Systems\nAcademic Conduct:\nPlagiarism—presenting someone else’s ideas as your own, either verbatim or recast in your own words—is a serious academic offense with serious consequences. Please familiarize yourself with the discussion of plagiarism in SCampus in Part B, Section 11, “Behavior Violating University Standards” policy.usc.edu/scampus-part-b. Other forms of academic dishonesty are equally unacceptable. See additional information in SCampus and university policies on scientific misconduct, policy.usc.edu/scientific-misconduct.\nSupport Systems:\nCounseling and Mental Health - (213) 740-9355 - 24/7 on callstudenthealth.usc.edu/counseling\nFree and confidential mental health treatment for students, including short-term psychotherapy, group counseling, stress fitness workshops, and crisis intervention.\nNational Suicide Prevention Lifeline - 1 (800) 273-8255 - 24/7 on callsuicidepreventionlifeline.org\nFree and confidential emotional support to people in suicidal crisis or emotional distress 24 hours a day, 7 days a week.\nRelationship and Sexual Violence Prevention Services (RSVP) - (213) 740-9355(WELL), press “0” after hours - 24/7 on callstudenthealth.usc.edu/sexual-assault\nFree and confidential therapy services, workshops, and training for situations related to gender-based harm.\nOffice of Equity and Diversity (OED) - (213) 740-5086 | Title IX - (213) 821-8298equity.usc.edu, titleix.usc.edu\nInformation about how to get help or help someone affected by harassment or discrimination, rights of protected classes, reporting options, and additional resources for students, faculty, staff, visitors, and applicants.\nReporting Incidents of Bias or Harassment - (213) 740-5086 or (213) 821-8298usc-advocate.symplicity.com/care_report\nAvenue to report incidents of bias, hate crimes, and microaggressions to the Office of Equity and Diversity |Title IX for appropriate investigation, supportive measures, and response.\nThe Office of Disability Services and Programs - (213) 740-0776dsp.usc.edu\nSupport and accommodations for students with disabilities. Services include assistance in providing readers/notetakers/interpreters, special accommodations for test taking needs, assistance with architectural barriers, assistive technology, and support for individual needs.\nUSC Campus Support and Intervention - (213) 821-4710campussupport.usc.edu\nAssists students and families in resolving complex personal, financial, and academic issues adversely affecting their success as a student.\nDiversity at USC - (213) 740-2101diversity.usc.edu\nInformation on events, programs and training, the Provost’s Diversity and Inclusion Council, Diversity Liaisons for each academic school, chronology, participation, and various resources for students.\nUSC Emergency - UPC: (213) 740-4321, HSC: (323) 442-1000 - 24/7 on calldps.usc.edu, emergency.usc.edu\nEmergency assistance and avenue to report a crime. Latest updates regarding safety, including ways in which instruction will be continued if an officially declared emergency makes travel to campus infeasible.\nUSC Department of Public Safety - UPC: (213) 740-6000, HSC: (323) 442-1200 - 24/7 on calldps.usc.edu\nNon-emergency assistance or information.\nLast updated\n\n[1] \"January 05, 2022\"\n\n\n\n\n",
      "last_modified": "2022-01-05T21:14:24-08:00"
    }
  ],
  "collections": []
}
